{"ast":null,"code":"export const drawParticle=(ctx,particle)=>{ctx.beginPath();ctx.arc(particle.x,particle.y,particle.radius,0,Math.PI*2);ctx.strokeStyle=particle.type==='proton'?'#ff0000':particle.type==='neutron'?'#ffffff':'#00ffff';ctx.stroke();if(particle.type!=='electron'){drawQuarks(ctx,particle);}};const drawQuarks=(ctx,particle)=>{const types=particle.type==='proton'?['up','up','down']:['up','down','down'];types.forEach((type,i)=>{const angle=i*2*Math.PI/3;const qx=particle.x+Math.cos(angle)*(particle.radius*0.5);const qy=particle.y+Math.sin(angle)*(particle.radius*0.5);ctx.beginPath();ctx.arc(qx,qy,5,0,Math.PI*2);ctx.fillStyle=type==='up'?'#ff6b6b':'#4ecdc4';ctx.fill();});};","map":{"version":3,"names":["drawParticle","ctx","particle","beginPath","arc","x","y","radius","Math","PI","strokeStyle","type","stroke","drawQuarks","types","forEach","i","angle","qx","cos","qy","sin","fillStyle","fill"],"sources":["C:/Users/Rod/Documents/GitHub/IA_Atomic_Particles/simulacion-atomica/src/utils/drawingUtils.ts"],"sourcesContent":["import { Particle } from '../models/Particle';\r\n\r\nexport const drawParticle = (ctx: CanvasRenderingContext2D, particle: Particle) => {\r\n    ctx.beginPath();\r\n    ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n    ctx.strokeStyle = particle.type === 'proton' ? '#ff0000' : \r\n                     particle.type === 'neutron' ? '#ffffff' : '#00ffff';\r\n    ctx.stroke();\r\n\r\n    if (particle.type !== 'electron') {\r\n        drawQuarks(ctx, particle);\r\n    }\r\n};\r\n\r\nconst drawQuarks = (ctx: CanvasRenderingContext2D, particle: Particle) => {\r\n    const types = particle.type === 'proton' ? ['up', 'up', 'down'] : ['up', 'down', 'down'];\r\n    \r\n    types.forEach((type, i) => {\r\n        const angle = (i * 2 * Math.PI) / 3;\r\n        const qx = particle.x + Math.cos(angle) * (particle.radius * 0.5);\r\n        const qy = particle.y + Math.sin(angle) * (particle.radius * 0.5);\r\n        \r\n        ctx.beginPath();\r\n        ctx.arc(qx, qy, 5, 0, Math.PI * 2);\r\n        ctx.fillStyle = type === 'up' ? '#ff6b6b' : '#4ecdc4';\r\n        ctx.fill();\r\n    });\r\n}; "],"mappings":"AAEA,MAAO,MAAM,CAAAA,YAAY,CAAGA,CAACC,GAA6B,CAAEC,QAAkB,GAAK,CAC/ED,GAAG,CAACE,SAAS,CAAC,CAAC,CACfF,GAAG,CAACG,GAAG,CAACF,QAAQ,CAACG,CAAC,CAAEH,QAAQ,CAACI,CAAC,CAAEJ,QAAQ,CAACK,MAAM,CAAE,CAAC,CAAEC,IAAI,CAACC,EAAE,CAAG,CAAC,CAAC,CAChER,GAAG,CAACS,WAAW,CAAGR,QAAQ,CAACS,IAAI,GAAK,QAAQ,CAAG,SAAS,CACvCT,QAAQ,CAACS,IAAI,GAAK,SAAS,CAAG,SAAS,CAAG,SAAS,CACpEV,GAAG,CAACW,MAAM,CAAC,CAAC,CAEZ,GAAIV,QAAQ,CAACS,IAAI,GAAK,UAAU,CAAE,CAC9BE,UAAU,CAACZ,GAAG,CAAEC,QAAQ,CAAC,CAC7B,CACJ,CAAC,CAED,KAAM,CAAAW,UAAU,CAAGA,CAACZ,GAA6B,CAAEC,QAAkB,GAAK,CACtE,KAAM,CAAAY,KAAK,CAAGZ,QAAQ,CAACS,IAAI,GAAK,QAAQ,CAAG,CAAC,IAAI,CAAE,IAAI,CAAE,MAAM,CAAC,CAAG,CAAC,IAAI,CAAE,MAAM,CAAE,MAAM,CAAC,CAExFG,KAAK,CAACC,OAAO,CAAC,CAACJ,IAAI,CAAEK,CAAC,GAAK,CACvB,KAAM,CAAAC,KAAK,CAAID,CAAC,CAAG,CAAC,CAAGR,IAAI,CAACC,EAAE,CAAI,CAAC,CACnC,KAAM,CAAAS,EAAE,CAAGhB,QAAQ,CAACG,CAAC,CAAGG,IAAI,CAACW,GAAG,CAACF,KAAK,CAAC,EAAIf,QAAQ,CAACK,MAAM,CAAG,GAAG,CAAC,CACjE,KAAM,CAAAa,EAAE,CAAGlB,QAAQ,CAACI,CAAC,CAAGE,IAAI,CAACa,GAAG,CAACJ,KAAK,CAAC,EAAIf,QAAQ,CAACK,MAAM,CAAG,GAAG,CAAC,CAEjEN,GAAG,CAACE,SAAS,CAAC,CAAC,CACfF,GAAG,CAACG,GAAG,CAACc,EAAE,CAAEE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAEZ,IAAI,CAACC,EAAE,CAAG,CAAC,CAAC,CAClCR,GAAG,CAACqB,SAAS,CAAGX,IAAI,GAAK,IAAI,CAAG,SAAS,CAAG,SAAS,CACrDV,GAAG,CAACsB,IAAI,CAAC,CAAC,CACd,CAAC,CAAC,CACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}