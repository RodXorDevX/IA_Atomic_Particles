{"ast":null,"code":"// Constantes físicas\nconst k=8.9875e9;// Constante de Coulomb en N·m²/C²\nconst q_proton=1.602e-19;// Carga del protón en Coulombs\nconst q_electron=-1.602e-19;// Carga del electrón en Coulombs\nconst scale=1e-12;// Escala para convertir metros a picómetros\nexport const calculateForces=particles=>{for(let i=0;i<particles.length;i++){for(let j=i+1;j<particles.length;j++){const dx=(particles[j].x-particles[i].x)*scale;const dy=(particles[j].y-particles[i].y)*scale;const distance=Math.sqrt(dx*dx+dy*dy);if(distance===0)continue;let totalForce=0;// Repulsión protón-protón (Coulomb)\nif(particles[i].type==='proton'&&particles[j].type==='proton'){totalForce=k*q_proton*q_proton/(distance*distance);}// Interacción protón-electrón (Coulomb)\nelse if(particles[i].type==='proton'&&particles[j].type==='electron'||particles[i].type==='electron'&&particles[j].type==='proton'){totalForce=-(k*q_proton*q_electron)/(distance*distance);totalForce*=500;// Ajustar el escalamiento\n}// Repulsión electrón-electrón (Coulomb)\nelse if(particles[i].type==='electron'&&particles[j].type==='electron'){totalForce=k*q_electron*q_electron/(distance*distance);totalForce*=1000;}// Fuerza nuclear fuerte (corta distancia)\nelse if(particles[i].type==='proton'&&particles[j].type==='neutron'||particles[i].type==='neutron'&&particles[j].type==='proton'){const nuclearRange=40*scale;if(distance<nuclearRange){totalForce=-30*Math.exp(-distance/nuclearRange);}}if(totalForce!==0){const forceMagnitude=totalForce/distance;const fx=forceMagnitude*dx;const fy=forceMagnitude*dy;particles[i].dx-=fx/particles[i].mass;particles[i].dy-=fy/particles[i].mass;particles[j].dx+=fx/particles[j].mass;particles[j].dy+=fy/particles[j].mass;}}}return particles;};","map":{"version":3,"names":["k","q_proton","q_electron","scale","calculateForces","particles","i","length","j","dx","x","dy","y","distance","Math","sqrt","totalForce","type","nuclearRange","exp","forceMagnitude","fx","fy","mass"],"sources":["C:/Users/Rod/Documents/GitHub/IA_Atomic_Particles/simulacion-atomica/src/utils/physicsUtils.ts"],"sourcesContent":["import { Particle } from '../models/Particle';\r\n\r\n// Constantes físicas\r\nconst k = 8.9875e9; // Constante de Coulomb en N·m²/C²\r\nconst q_proton = 1.602e-19; // Carga del protón en Coulombs\r\nconst q_electron = -1.602e-19; // Carga del electrón en Coulombs\r\nconst scale = 1e-12; // Escala para convertir metros a picómetros\r\n\r\nexport const calculateForces = (particles: Particle[]): Particle[] => {\r\n    for (let i = 0; i < particles.length; i++) {\r\n        for (let j = i + 1; j < particles.length; j++) {\r\n            const dx = (particles[j].x - particles[i].x) * scale;\r\n            const dy = (particles[j].y - particles[i].y) * scale;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (distance === 0) continue;\r\n            \r\n            let totalForce = 0;\r\n            \r\n            // Repulsión protón-protón (Coulomb)\r\n            if (particles[i].type === 'proton' && particles[j].type === 'proton') {\r\n                totalForce = (k * q_proton * q_proton) / (distance * distance);\r\n            }\r\n            \r\n            // Interacción protón-electrón (Coulomb)\r\n            else if ((particles[i].type === 'proton' && particles[j].type === 'electron') ||\r\n                     (particles[i].type === 'electron' && particles[j].type === 'proton')) {\r\n                totalForce = -(k * q_proton * q_electron) / (distance * distance);\r\n                totalForce *= 500; // Ajustar el escalamiento\r\n            }\r\n            \r\n            // Repulsión electrón-electrón (Coulomb)\r\n            else if (particles[i].type === 'electron' && particles[j].type === 'electron') {\r\n                totalForce = (k * q_electron * q_electron) / (distance * distance);\r\n                totalForce *= 1000;\r\n            }\r\n            \r\n            // Fuerza nuclear fuerte (corta distancia)\r\n            else if ((particles[i].type === 'proton' && particles[j].type === 'neutron') ||\r\n                     (particles[i].type === 'neutron' && particles[j].type === 'proton')) {\r\n                const nuclearRange = 40 * scale;\r\n                if (distance < nuclearRange) {\r\n                    totalForce = -30 * Math.exp(-distance / nuclearRange);\r\n                }\r\n            }\r\n            \r\n            if (totalForce !== 0) {\r\n                const forceMagnitude = totalForce / distance;\r\n                const fx = forceMagnitude * dx;\r\n                const fy = forceMagnitude * dy;\r\n                \r\n                particles[i].dx -= fx / particles[i].mass;\r\n                particles[i].dy -= fy / particles[i].mass;\r\n                particles[j].dx += fx / particles[j].mass;\r\n                particles[j].dy += fy / particles[j].mass;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return particles;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}