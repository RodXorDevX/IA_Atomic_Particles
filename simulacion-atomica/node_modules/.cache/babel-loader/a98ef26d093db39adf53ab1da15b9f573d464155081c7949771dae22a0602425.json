{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rod\\\\Documents\\\\GitHub\\\\IA_Atomic_Particles\\\\simulacion-atomica\\\\src\\\\components\\\\AtomicCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { Particle } from '../models/Particle';\nimport { useAnimationFrame } from '../hooks/useAnimationFrame';\nimport { drawParticle } from '../utils/drawingUtils';\nimport { calculateForces } from '../utils/physicsUtils';\nimport '../styles/AtomicCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AtomicCanvas = ({\n  width,\n  height\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [particles, setParticles] = useState([]);\n  const [isRunning, setIsRunning] = useState(true);\n  const addParticle = type => {\n    const x = Math.random() * (width - 40) + 20;\n    const y = Math.random() * (height - 40) + 20;\n    const newParticle = new Particle({\n      x,\n      y,\n      type\n    });\n    setParticles(prev => [...prev, newParticle]);\n  };\n  const clearCanvas = () => {\n    setParticles([]);\n  };\n  const animate = () => {\n    if (!canvasRef.current || !isRunning) return;\n    const ctx = canvasRef.current.getContext('2d');\n    if (!ctx) return;\n\n    // Limpiar canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Calcular fuerzas y actualizar partículas\n    const updatedParticles = calculateForces([...particles]);\n    updatedParticles.forEach(particle => {\n      particle.update(width, height, particle.type === 'electron' ? 0.99 : 0.7);\n      drawParticle(ctx, particle);\n    });\n    setParticles(updatedParticles);\n  };\n  useAnimationFrame(animate, isRunning);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"atomic-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addParticle('proton'),\n        children: \"+ Prot\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addParticle('neutron'),\n        children: \"+ Neutr\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addParticle('electron'),\n        children: \"+ Electr\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Limpiar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(!isRunning),\n        children: isRunning ? 'Pausar' : 'Reanudar'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: width,\n      height: height,\n      className: \"atomic-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(AtomicCanvas, \"I7Tx1XRkijvQw9LEePAfNITLOTs=\", false, function () {\n  return [useAnimationFrame];\n});\n_c = AtomicCanvas;\nvar _c;\n$RefreshReg$(_c, \"AtomicCanvas\");","map":{"version":3,"names":["React","useRef","useState","Particle","useAnimationFrame","drawParticle","calculateForces","jsxDEV","_jsxDEV","AtomicCanvas","width","height","_s","canvasRef","particles","setParticles","isRunning","setIsRunning","addParticle","type","x","Math","random","y","newParticle","prev","clearCanvas","animate","current","ctx","getContext","clearRect","updatedParticles","forEach","particle","update","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Rod/Documents/GitHub/IA_Atomic_Particles/simulacion-atomica/src/components/AtomicCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { Particle, ParticleType } from '../models/Particle';\r\nimport { useAnimationFrame } from '../hooks/useAnimationFrame';\r\nimport { drawParticle } from '../utils/drawingUtils';\r\nimport { calculateForces } from '../utils/physicsUtils';\r\nimport '../styles/AtomicCanvas.css';\r\n\r\ninterface AtomicCanvasProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport const AtomicCanvas: React.FC<AtomicCanvasProps> = ({ width, height }) => {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const [particles, setParticles] = useState<Particle[]>([]);\r\n    const [isRunning, setIsRunning] = useState(true);\r\n\r\n    const addParticle = (type: ParticleType) => {\r\n        const x = Math.random() * (width - 40) + 20;\r\n        const y = Math.random() * (height - 40) + 20;\r\n        const newParticle = new Particle({ x, y, type });\r\n        setParticles(prev => [...prev, newParticle]);\r\n    };\r\n\r\n    const clearCanvas = () => {\r\n        setParticles([]);\r\n    };\r\n\r\n    const animate = () => {\r\n        if (!canvasRef.current || !isRunning) return;\r\n        \r\n        const ctx = canvasRef.current.getContext('2d');\r\n        if (!ctx) return;\r\n\r\n        // Limpiar canvas\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        // Calcular fuerzas y actualizar partículas\r\n        const updatedParticles = calculateForces([...particles]);\r\n        updatedParticles.forEach(particle => {\r\n            particle.update(width, height, particle.type === 'electron' ? 0.99 : 0.7);\r\n            drawParticle(ctx, particle);\r\n        });\r\n\r\n        setParticles(updatedParticles);\r\n    };\r\n\r\n    useAnimationFrame(animate, isRunning);\r\n\r\n    return (\r\n        <div className=\"atomic-canvas-container\">\r\n            <div className=\"controls\">\r\n                <button onClick={() => addParticle('proton')}>+ Protón</button>\r\n                <button onClick={() => addParticle('neutron')}>+ Neutrón</button>\r\n                <button onClick={() => addParticle('electron')}>+ Electrón</button>\r\n                <button onClick={clearCanvas}>Limpiar</button>\r\n                <button onClick={() => setIsRunning(!isRunning)}>\r\n                    {isRunning ? 'Pausar' : 'Reanudar'}\r\n                </button>\r\n            </div>\r\n            <canvas\r\n                ref={canvasRef}\r\n                width={width}\r\n                height={height}\r\n                className=\"atomic-canvas\"\r\n            />\r\n        </div>\r\n    );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}