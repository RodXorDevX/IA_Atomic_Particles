{"ast":null,"code":"import React,{useRef,useState}from'react';import{Particle}from'../models/Particle';import{useAnimationFrame}from'../hooks/useAnimationFrame';import{drawParticle}from'../utils/drawingUtils';import{calculateForces}from'../utils/physicsUtils';import'../styles/AtomicCanvas.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const AtomicCanvas=_ref=>{let{width,height}=_ref;const canvasRef=useRef(null);const[particles,setParticles]=useState([]);const[isRunning,setIsRunning]=useState(true);const addParticle=type=>{const x=Math.random()*(width-40)+20;const y=Math.random()*(height-40)+20;const newParticle=new Particle({x,y,type});setParticles(prev=>[...prev,newParticle]);};const clearCanvas=()=>{setParticles([]);};const animate=()=>{if(!canvasRef.current||!isRunning)return;const ctx=canvasRef.current.getContext('2d');if(!ctx)return;// Limpiar canvas\nctx.clearRect(0,0,width,height);// Calcular fuerzas y actualizar partículas\nconst updatedParticles=calculateForces([...particles]);updatedParticles.forEach(particle=>{particle.update(width,height,particle.type==='electron'?0.99:0.7);drawParticle(ctx,particle);});setParticles(updatedParticles);};useAnimationFrame(animate,isRunning);return/*#__PURE__*/_jsxs(\"div\",{className:\"atomic-canvas-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>addParticle('proton'),children:\"+ Prot\\xF3n\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>addParticle('neutron'),children:\"+ Neutr\\xF3n\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>addParticle('electron'),children:\"+ Electr\\xF3n\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearCanvas,children:\"Limpiar\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsRunning(!isRunning),children:isRunning?'Pausar':'Reanudar'})]}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:width,height:height,className:\"atomic-canvas\"})]});};","map":{"version":3,"names":["React","useRef","useState","Particle","useAnimationFrame","drawParticle","calculateForces","jsx","_jsx","jsxs","_jsxs","AtomicCanvas","_ref","width","height","canvasRef","particles","setParticles","isRunning","setIsRunning","addParticle","type","x","Math","random","y","newParticle","prev","clearCanvas","animate","current","ctx","getContext","clearRect","updatedParticles","forEach","particle","update","className","children","onClick","ref"],"sources":["C:/Users/Rod/Documents/GitHub/IA_Atomic_Particles/simulacion-atomica/src/components/AtomicCanvas.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { Particle, ParticleType } from '../models/Particle';\nimport { useAnimationFrame } from '../hooks/useAnimationFrame';\nimport { drawParticle } from '../utils/drawingUtils';\nimport { calculateForces } from '../utils/physicsUtils';\nimport '../styles/AtomicCanvas.css';\n\ninterface AtomicCanvasProps {\n    width: number;\n    height: number;\n}\n\nexport const AtomicCanvas: React.FC<AtomicCanvasProps> = ({ width, height }) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [particles, setParticles] = useState<Particle[]>([]);\n    const [isRunning, setIsRunning] = useState(true);\n\n    const addParticle = (type: ParticleType) => {\n        const x = Math.random() * (width - 40) + 20;\n        const y = Math.random() * (height - 40) + 20;\n        const newParticle = new Particle({ x, y, type });\n        setParticles(prev => [...prev, newParticle]);\n    };\n\n    const clearCanvas = () => {\n        setParticles([]);\n    };\n\n    const animate = () => {\n        if (!canvasRef.current || !isRunning) return;\n        \n        const ctx = canvasRef.current.getContext('2d');\n        if (!ctx) return;\n\n        // Limpiar canvas\n        ctx.clearRect(0, 0, width, height);\n\n        // Calcular fuerzas y actualizar partículas\n        const updatedParticles = calculateForces([...particles]);\n        updatedParticles.forEach(particle => {\n            particle.update(width, height, particle.type === 'electron' ? 0.99 : 0.7);\n            drawParticle(ctx, particle);\n        });\n\n        setParticles(updatedParticles);\n    };\n\n    useAnimationFrame(animate, isRunning);\n\n    return (\n        <div className=\"atomic-canvas-container\">\n            <div className=\"controls\">\n                <button onClick={() => addParticle('proton')}>+ Protón</button>\n                <button onClick={() => addParticle('neutron')}>+ Neutrón</button>\n                <button onClick={() => addParticle('electron')}>+ Electrón</button>\n                <button onClick={clearCanvas}>Limpiar</button>\n                <button onClick={() => setIsRunning(!isRunning)}>\n                    {isRunning ? 'Pausar' : 'Reanudar'}\n                </button>\n            </div>\n            <canvas\n                ref={canvasRef}\n                width={width}\n                height={height}\n                className=\"atomic-canvas\"\n            />\n        </div>\n    );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}