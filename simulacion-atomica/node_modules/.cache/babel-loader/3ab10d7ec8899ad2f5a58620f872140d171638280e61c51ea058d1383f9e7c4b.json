{"ast":null,"code":"// Constantes físicas\nconst k = 8.9875e9; // Constante de Coulomb en N·m²/C²\nconst q_proton = 1.602e-19; // Carga del protón en Coulombs\nconst q_electron = -1.602e-19; // Carga del electrón en Coulombs\nconst scale = 1e-12; // Escala para convertir metros a picómetros\n\nexport const calculateForces = particles => {\n  for (let i = 0; i < particles.length; i++) {\n    for (let j = i + 1; j < particles.length; j++) {\n      const dx = (particles[j].x - particles[i].x) * scale;\n      const dy = (particles[j].y - particles[i].y) * scale;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance === 0) continue;\n      let totalForce = 0;\n\n      // Repulsión protón-protón (Coulomb)\n      if (particles[i].type === 'proton' && particles[j].type === 'proton') {\n        totalForce = k * q_proton * q_proton / (distance * distance);\n      }\n\n      // Interacción protón-electrón (Coulomb)\n      else if (particles[i].type === 'proton' && particles[j].type === 'electron' || particles[i].type === 'electron' && particles[j].type === 'proton') {\n        totalForce = -(k * q_proton * q_electron) / (distance * distance);\n        totalForce *= 500; // Ajustar el escalamiento\n      }\n\n      // Repulsión electrón-electrón (Coulomb)\n      else if (particles[i].type === 'electron' && particles[j].type === 'electron') {\n        totalForce = k * q_electron * q_electron / (distance * distance);\n        totalForce *= 1000;\n      }\n\n      // Fuerza nuclear fuerte (corta distancia)\n      else if (particles[i].type === 'proton' && particles[j].type === 'neutron' || particles[i].type === 'neutron' && particles[j].type === 'proton') {\n        const nuclearRange = 40 * scale;\n        if (distance < nuclearRange) {\n          totalForce = -30 * Math.exp(-distance / nuclearRange);\n        }\n      }\n      if (totalForce !== 0) {\n        const forceMagnitude = totalForce / distance;\n        const fx = forceMagnitude * dx;\n        const fy = forceMagnitude * dy;\n        particles[i].dx -= fx / particles[i].mass;\n        particles[i].dy -= fy / particles[i].mass;\n        particles[j].dx += fx / particles[j].mass;\n        particles[j].dy += fy / particles[j].mass;\n      }\n    }\n  }\n  return particles;\n};","map":{"version":3,"names":["k","q_proton","q_electron","scale","calculateForces","particles","i","length","j","dx","x","dy","y","distance","Math","sqrt","totalForce","type","nuclearRange","exp","forceMagnitude","fx","fy","mass"],"sources":["C:/Users/Rod/Documents/GitHub/IA_Atomic_Particles/simulacion-atomica/src/utils/physicsUtils.ts"],"sourcesContent":["import { Particle } from '../models/Particle';\r\n\r\n// Constantes físicas\r\nconst k = 8.9875e9; // Constante de Coulomb en N·m²/C²\r\nconst q_proton = 1.602e-19; // Carga del protón en Coulombs\r\nconst q_electron = -1.602e-19; // Carga del electrón en Coulombs\r\nconst scale = 1e-12; // Escala para convertir metros a picómetros\r\n\r\nexport const calculateForces = (particles: Particle[]): Particle[] => {\r\n    for (let i = 0; i < particles.length; i++) {\r\n        for (let j = i + 1; j < particles.length; j++) {\r\n            const dx = (particles[j].x - particles[i].x) * scale;\r\n            const dy = (particles[j].y - particles[i].y) * scale;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (distance === 0) continue;\r\n            \r\n            let totalForce = 0;\r\n            \r\n            // Repulsión protón-protón (Coulomb)\r\n            if (particles[i].type === 'proton' && particles[j].type === 'proton') {\r\n                totalForce = (k * q_proton * q_proton) / (distance * distance);\r\n            }\r\n            \r\n            // Interacción protón-electrón (Coulomb)\r\n            else if ((particles[i].type === 'proton' && particles[j].type === 'electron') ||\r\n                     (particles[i].type === 'electron' && particles[j].type === 'proton')) {\r\n                totalForce = -(k * q_proton * q_electron) / (distance * distance);\r\n                totalForce *= 500; // Ajustar el escalamiento\r\n            }\r\n            \r\n            // Repulsión electrón-electrón (Coulomb)\r\n            else if (particles[i].type === 'electron' && particles[j].type === 'electron') {\r\n                totalForce = (k * q_electron * q_electron) / (distance * distance);\r\n                totalForce *= 1000;\r\n            }\r\n            \r\n            // Fuerza nuclear fuerte (corta distancia)\r\n            else if ((particles[i].type === 'proton' && particles[j].type === 'neutron') ||\r\n                     (particles[i].type === 'neutron' && particles[j].type === 'proton')) {\r\n                const nuclearRange = 40 * scale;\r\n                if (distance < nuclearRange) {\r\n                    totalForce = -30 * Math.exp(-distance / nuclearRange);\r\n                }\r\n            }\r\n            \r\n            if (totalForce !== 0) {\r\n                const forceMagnitude = totalForce / distance;\r\n                const fx = forceMagnitude * dx;\r\n                const fy = forceMagnitude * dy;\r\n                \r\n                particles[i].dx -= fx / particles[i].mass;\r\n                particles[i].dy -= fy / particles[i].mass;\r\n                particles[j].dx += fx / particles[j].mass;\r\n                particles[j].dy += fy / particles[j].mass;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return particles;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}